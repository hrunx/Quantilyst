{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/types.ts"],"sourcesContent":["/**\n * @fileOverview This file contains all the TypeScript types and Zod schemas\n *               for the AI flows used in the application. Centralizing them\n *               here allows for consistent data structures and avoids circular\n *               dependencies or issues with Next.js server actions.\n */\n\nimport {z} from 'zod';\n\n// Schema for a single keyword\nexport const KeywordSchema = z.object({\n  id: z.string().describe('A unique identifier for the keyword.'),\n  name: z.string().describe('The keyword phrase itself.'),\n  volume: z.number().optional().describe('An estimated search volume or trend score.'),\n  change: z.number().describe('The percentage change over a specific period.'),\n  difficulty: z.number().optional().describe('An estimated SEO difficulty score (0-100).'),\n  serpFeatures: z.array(z.string()).optional().describe('A list of observed SERP features (e.g., \"Featured Snippet\").'),\n  sources: z.array(z.string()).optional().describe('The simulated data sources or tools used to generate this data.'),\n});\nexport type Keyword = z.infer<typeof KeywordSchema>;\n\n\n// Schema for generating trending keywords\nexport const GenerateTrendingKeywordsInputSchema = z.object({\n  businessType: z.string().describe('The business type or industry context.'),\n  country: z.string().describe('The target country for the keyword trends.'),\n  city: z.string().optional().describe('The optional target city for more localized trends.'),\n});\nexport type GenerateTrendingKeywordsInput = z.infer<typeof GenerateTrendingKeywordsInputSchema>;\n\nexport const GenerateTrendingKeywordsOutputSchema = z.object({\n  hour: z.array(KeywordSchema).describe('Keywords trending in the past hour.'),\n  day: z.array(KeywordSchema).describe('Keywords trending in the past day.'),\n  week: z.array(KeywordSchema).describe('Keywords trending in the past week.'),\n  month: z.array(KeywordSchema).describe('Keywords trending in the past month.'),\n});\nexport type GenerateTrendingKeywordsOutput = z.infer<typeof GenerateTrendingKeywordsOutputSchema>;\n\n\n// Schema for translating keywords to Arabic\nexport const TranslateKeywordsArabicInputSchema = z.object({\n  businessType: z.string().describe('The business context for the translation.'),\n  keywords: z.string().describe('A comma-separated string of English keywords to be translated.'),\n});\nexport type TranslateKeywordsArabicInput = z.infer<typeof TranslateKeywordsArabicInputSchema>;\n\nexport const TranslatedKeywordSchema = z.object({\n  keyword: z.string().describe('The translated keyword in Arabic.'),\n  volume: z.number().describe('The estimated search volume in the KSA market.'),\n  change: z.number().describe('The estimated trend change percentage.'),\n});\nexport type TranslatedKeyword = z.infer<typeof TranslatedKeywordSchema>;\n\nexport const TranslateKeywordsArabicOutputSchema = z.object({\n  translatedKeywords: z.array(TranslatedKeywordSchema),\n});\nexport type TranslateKeywordsArabicOutput = z.infer<typeof TranslateKeywordsArabicOutputSchema>;\n\n\n// Schema for generating SEO content suggestions\nexport const SeoContentSuggestionsInputSchema = z.object({\n  businessType: z.string(),\n  trendingKeywords: z.string().describe('A comma-separated string of trending keywords to base suggestions on.'),\n});\nexport type SeoContentSuggestionsInput = z.infer<typeof SeoContentSuggestionsInputSchema>;\n\nexport const SeoSuggestionSchema = z.object({\n  title: z.string().describe('A compelling, SEO-friendly title for a piece of content.'),\n  hook: z.string().describe('An engaging opening line or hook to capture reader attention.'),\n  points: z.array(z.string()).describe('A list of key talking points or sections for the content.'),\n});\nexport type SeoSuggestion = z.infer<typeof SeoSuggestionSchema>;\n\nexport const SeoContentSuggestionsOutputSchema = z.object({\n  suggestions: z.array(SeoSuggestionSchema),\n});\nexport type SeoContentSuggestionsOutput = z.infer<typeof SeoContentSuggestionsOutputSchema>;\n\n\n// Schema for advanced SEO keyword analysis\nexport const AdvancedSeoKeywordAnalysisInputSchema = z.object({\n  businessType: z.string(),\n  keyword: z.string(),\n});\nexport type AdvancedSeoKeywordAnalysisInput = z.infer<typeof AdvancedSeoKeywordAnalysisInputSchema>;\n\nexport const AdvancedSeoKeywordAnalysisOutputSchema = z.object({\n  searchIntent: z.string().describe('The primary user intent (e.g., Informational, Transactional).'),\n  targetAudience: z.string().describe('A description of the target audience persona.'),\n  competitiveLandscape: z.string().describe('An overview of the current ranking content and competitors.'),\n  contentAngle: z.string().describe('A unique angle to create standout content.'),\n  longTailKeywords: z.array(z.string()).describe('A list of related, more specific long-tail keywords.'),\n  relatedQuestions: z.array(z.string()).describe('Common questions users ask related to this keyword.'),\n  detailedContentOutline: z.object({\n    title: z.string().describe('An optimized title for the content.'),\n    sections: z.array(\n      z.object({\n        heading: z.string().describe('The heading for a content section.'),\n        points: z.array(z.string()).describe('Bullet points to cover within that section.'),\n      })\n    ),\n  }),\n  difficultyAnalysis: z.string().describe('An analysis of why it might be easy or hard to rank.'),\n  confidenceScore: z.number().describe('A 0-100 confidence score in the analysis.'),\n  simulatedSources: z.array(z.string()).describe('A list of simulated data sources used for the analysis.'),\n});\nexport type AdvancedSeoKeywordAnalysisOutput = z.infer<typeof AdvancedSeoKeywordAnalysisOutputSchema>;\n\n\n// Schema for generating a chart takeaway\nexport const GenerateChartTakeawayInputSchema = z.object({\n    businessType: z.string(),\n    keywordChartData: z.string().describe('A JSON string representing the data shown in the chart.'),\n});\nexport type GenerateChartTakeawayInput = z.infer<typeof GenerateChartTakeawayInputSchema>;\n\nexport const GenerateChartTakeawayOutputSchema = z.object({\n    takeaway: z.string().describe('A single, concise sentence summarizing the key insight from the chart data.'),\n});\nexport type GenerateChartTakeawayOutput = z.infer<typeof GenerateChartTakeawayOutputSchema>;\n\n// Schema for the Market Deep-Dive Report\nexport const MarketDeepDiveInputSchema = z.object({\n    businessType: z.string().describe('The business type or industry context.'),\n    country: z.string().describe('The target country for the analysis.'),\n    city: z.string().optional().describe('The optional target city.'),\n});\nexport type MarketDeepDiveInput = z.infer<typeof MarketDeepDiveInputSchema>;\n\nexport const MarketDeepDiveOutputSchema = z.object({\n    executiveSummary: z.string().describe(\"A C-suite level summary of the market analysis and strategic recommendations.\"),\n    tamSamSom: z.object({\n        tam: z.object({\n            value: z.number().describe(\"Total Addressable Market value in USD.\"),\n            description: z.string(),\n            sources: z.array(z.string()).describe(\"Simulated sources for TAM data.\"),\n        }),\n        sam: z.object({\n            value: z.number().describe(\"Serviceable Available Market value in USD.\"),\n            description: z.string(),\n            sources: z.array(z.string()).describe(\"Simulated sources for SAM data.\"),\n        }),\n        som: z.object({\n            value: z.number().describe(\"Serviceable Obtainable Market value in USD.\"),\n            description: z.string(),\n            sources: z.array(z.string()).describe(\"Simulated sources for SOM data.\"),\n        }),\n    }),\n    competitors: z.array(z.object({\n        name: z.string().describe(\"Name of the competitor.\"),\n        strengths: z.string().describe(\"Key strengths of the competitor.\"),\n        weaknesses: z.string().describe(\"Key weaknesses of the competitor.\"),\n        marketShare: z.string().describe(\"Estimated market share percentage.\"),\n    })).describe(\"A benchmark of key competitors in the market.\"),\n    swot: z.object({\n        strengths: z.array(z.string()),\n        weaknesses: z.array(z.string()),\n        opportunities: z.array(z.string()),\n        threats: z.array(z.string()),\n    }).describe(\"A SWOT analysis for a new entrant in this market.\"),\n});\nexport type MarketDeepDiveOutput = z.infer<typeof MarketDeepDiveOutputSchema>;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 376, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/translate-keywords-arabic.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A flow for translating keywords to Arabic.\n * It translates a list of English keywords to Arabic, providing\n * estimated search volume and trend data for the KSA market.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {\n  TranslateKeywordsArabicInputSchema,\n  TranslateKeywordsArabicOutputSchema,\n} from '@/ai/types';\nimport type {TranslateKeywordsArabicOutput, TranslateKeywordsArabicInput} from '@/ai/types';\n\n\nexport async function translateKeywordsArabic(\n  input: TranslateKeywordsArabicInput\n): Promise<TranslateKeywordsArabicOutput> {\n  return await translateKeywordsArabicFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n    name: 'translateKeywordsArabicPrompt',\n    input: {schema: TranslateKeywordsArabicInputSchema},\n    output: {schema: TranslateKeywordsArabicOutputSchema},\n    prompt: `\n        You are a master SEO specialist and linguist focused on the Saudi Arabia (KSA) market.\n        Your task is to translate a list of English keywords into Arabic and provide estimated market data for them.\n\n        **Business Context:** {{{businessType}}}\n        **Keywords to Translate:** {{{keywords}}}\n\n        **Instructions:**\n        1.  Translate each English keyword from the list into the most commercially relevant and commonly searched Arabic equivalent for the KSA market.\n        2.  For each translated Arabic keyword, provide a realistic (but simulated) estimated search **volume**.\n        3.  For each translated Arabic keyword, provide a realistic (but simulated) trend **change** percentage.\n        4.  Return the data strictly in the format specified by the output schema.\n    `,\n});\n\n\nconst translateKeywordsArabicFlow = ai.defineFlow(\n  {\n    name: 'translateKeywordsArabicFlow',\n    inputSchema: TranslateKeywordsArabicInputSchema,\n    outputSchema: TranslateKeywordsArabicOutputSchema,\n  },\n  async (input) => {\n    const {output} = await prompt(input);\n    if (!output) {\n        throw new Error('AI did not return valid Arabic translation data.');\n    }\n    return output;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;CAIC,GAED;AACA;;;;;;AAOO,eAAe,uCAAqB,GAArB,wBACpB,KAAmC;IAEnC,OAAO,MAAM,4BAA4B;AAC3C;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC3B,MAAM;IACN,OAAO;QAAC,QAAQ,kHAAA,CAAA,qCAAkC;IAAA;IAClD,QAAQ;QAAC,QAAQ,kHAAA,CAAA,sCAAmC;IAAA;IACpD,QAAQ,CAAC;;;;;;;;;;;;IAYT,CAAC;AACL;AAGA,MAAM,8BAA8B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC/C;IACE,MAAM;IACN,aAAa,kHAAA,CAAA,qCAAkC;IAC/C,cAAc,kHAAA,CAAA,sCAAmC;AACnD,GACA,OAAO;IACL,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,IAAI,CAAC,QAAQ;QACT,MAAM,IAAI,MAAM;IACpB;IACA,OAAO;AACT;;;IAtCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 439, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/seo-content-suggestions.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview This file defines the Genkit flow for generating SEO content suggestions.\n *\n * This flow provides actionable content briefs based on trending keywords for a given\n * business type. Each brief includes a title, hook, and key talking points.\n *\n * The main export is `seoContentSuggestions`.\n */\n\nimport { ai } from '@/ai/genkit';\nimport {\n  SeoContentSuggestionsInputSchema,\n  type SeoContentSuggestionsInput,\n  SeoContentSuggestionsOutputSchema,\n  type SeoContentSuggestionsOutput,\n} from '@/ai/types';\n\n\nexport async function seoContentSuggestions(\n  input: SeoContentSuggestionsInput\n): Promise<SeoContentSuggestionsOutput> {\n  return await seoContentSuggestionsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'seoContentSuggestionsPrompt',\n  input: { schema: SeoContentSuggestionsInputSchema },\n  output: { schema: SeoContentSuggestionsOutputSchema },\n  prompt: `\n    You are an expert Content Strategist for a \"{{businessType}}\" business.\n    Based on the following trending keywords: \"{{trendingKeywords}}\", generate 3 distinct and actionable content briefs.\n\n    Each brief in the \"suggestions\" array must be a JSON object containing:\n    1.  **title**: A compelling, SEO-friendly title for the content.\n    2.  **hook**: An engaging opening line or hook to capture the reader's attention.\n    3.  **points**: A list of 3-4 key talking points or sections that should be covered in the content.\n  `,\n});\n\nconst seoContentSuggestionsFlow = ai.defineFlow(\n  {\n    name: 'seoContentSuggestionsFlow',\n    inputSchema: SeoContentSuggestionsInputSchema,\n    outputSchema: SeoContentSuggestionsOutputSchema,\n  },\n  async (input) => {\n    const { output } = await prompt(input);\n    if (!output) {\n      throw new Error('Failed to generate SEO content suggestions.');\n    }\n    return output;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;;CAOC,GAED;AACA;;;;;;AAQO,eAAe,uCAAmB,GAAnB,sBACpB,KAAiC;IAEjC,OAAO,MAAM,0BAA0B;AACzC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAE,QAAQ,kHAAA,CAAA,mCAAgC;IAAC;IAClD,QAAQ;QAAE,QAAQ,kHAAA,CAAA,oCAAiC;IAAC;IACpD,QAAQ,CAAC;;;;;;;;EAQT,CAAC;AACH;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa,kHAAA,CAAA,mCAAgC;IAC7C,cAAc,kHAAA,CAAA,oCAAiC;AACjD,GACA,OAAO;IACL,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;;;IAjCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 501, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/advanced-seo-keyword-analysis.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A flow for conducting an advanced SEO analysis of a keyword.\n *\n * This file defines a Genkit flow that performs a deep dive into a specific keyword,\n * providing strategic insights for content creation and marketing. It simulates the\n * process of a senior SEO strategist analyzing a keyword's potential.\n *\n * The flow returns a comprehensive analysis including:\n * - Search Intent: The primary goal of a user when searching for the keyword.\n * - Target Audience: A description of the ideal user persona.\n * - Competitive Landscape: An overview of what content currently ranks for the keyword.\n * - Unique Content Angle: A novel perspective to make content stand out.\n * - Long-tail Keywords: A list of related, more specific keywords.\n * - Related Questions: Common questions users ask related to the keyword.\n * - Detailed Content Outline: A structured plan for a blog post or article.\n * - Difficulty Analysis: An explanation of the challenges in ranking for the keyword.\n * - Confidence Score & Sources: An assessment of the analysis's reliability and the data sources used.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {\n  AdvancedSeoKeywordAnalysisInputSchema,\n  AdvancedSeoKeywordAnalysisOutputSchema,\n  type AdvancedSeoKeywordAnalysisInput,\n  type AdvancedSeoKeywordAnalysisOutput,\n} from '@/ai/types';\n\n/**\n * Performs an advanced SEO analysis for a given keyword and business type.\n * This is the main entry point to be called from the application server.\n * @param input - The keyword and business context for the analysis.\n * @returns A promise that resolves to a detailed SEO analysis report.\n */\nexport async function advancedSeoKeywordAnalysis(\n  input: AdvancedSeoKeywordAnalysisInput\n): Promise<AdvancedSeoKeywordAnalysisOutput> {\n  return advancedSeoKeywordAnalysisFlow(input);\n}\n\n// Defines the Genkit prompt for the advanced SEO analysis.\nconst advancedSeoKeywordAnalysisPrompt = ai.definePrompt({\n  name: 'advancedSeoKeywordAnalysisPrompt',\n  input: {schema: AdvancedSeoKeywordAnalysisInputSchema},\n  output: {schema: AdvancedSeoKeywordAnalysisOutputSchema},\n  prompt: `\n    You are a world-class CMO and Senior SEO Strategist for a top-tier market intelligence firm.\n    Your client is in the '{{businessType}}' industry.\n    They want a comprehensive, executive-level strategic brief for the keyword: \"{{keyword}}\".\n\n    Generate a detailed analysis covering the following points. Be insightful, specific, and actionable.\n\n    1.  **Search Intent**: What is the primary user goal? (e.g., Informational, Navigational, Commercial, Transactional).\n    2.  **Target Audience**: Describe the user persona. What are their goals and pain points?\n    3.  **Competitive Landscape**: What kind of content currently ranks? Who are the main players? What is their general angle?\n    4.  **Unique Content Angle**: What's a unique, defensible content angle that could outperform the competition?\n    5.  **Long-tail Keywords**: List at least 5 related long-tail keywords that flesh out the topic.\n    6.  **Related Questions**: List the top 5 questions people are asking related to this keyword (like \"People Also Ask\").\n    7.  **Detailed Content Outline**: Provide a full content outline for a blog post. Include a compelling title and break it down into sections with clear headings and bullet points for what each section should cover.\n    8.  **Difficulty Analysis**: Briefly explain why it might be easy or hard to rank for this keyword.\n    9.  **Confidence Score**: How confident are you in this analysis on a scale of 0-100?\n    10. **Simulated Data Sources**: List the types of sources you are simulating to generate this analysis (e.g., 'Google Search Results', 'Ahrefs Keyword Explorer', 'AnswerThePublic', 'Competitor Blogs').\n  `,\n});\n\n// Defines the Genkit flow that orchestrates the advanced SEO analysis.\nconst advancedSeoKeywordAnalysisFlow = ai.defineFlow(\n  {\n    name: 'advancedSeoKeywordAnalysisFlow',\n    inputSchema: AdvancedSeoKeywordAnalysisInputSchema,\n    outputSchema: AdvancedSeoKeywordAnalysisOutputSchema,\n  },\n  async (input) => {\n    // The prompt handles the entire analysis process.\n    const {output} = await advancedSeoKeywordAnalysisPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;;;;;;;;;;;;CAiBC,GAED;AACA;;;;;;AAaO,eAAe,uCAAwB,GAAxB,2BACpB,KAAsC;IAEtC,OAAO,+BAA+B;AACxC;AAEA,2DAA2D;AAC3D,MAAM,mCAAmC,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACvD,MAAM;IACN,OAAO;QAAC,QAAQ,kHAAA,CAAA,wCAAqC;IAAA;IACrD,QAAQ;QAAC,QAAQ,kHAAA,CAAA,yCAAsC;IAAA;IACvD,QAAQ,CAAC;;;;;;;;;;;;;;;;;EAiBT,CAAC;AACH;AAEA,uEAAuE;AACvE,MAAM,iCAAiC,mHAAA,CAAA,KAAE,CAAC,UAAU,CAClD;IACE,MAAM;IACN,aAAa,kHAAA,CAAA,wCAAqC;IAClD,cAAc,kHAAA,CAAA,yCAAsC;AACtD,GACA,OAAO;IACL,kDAAkD;IAClD,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,iCAAiC;IACxD,OAAO;AACT;;;IA1CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 582, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-trending-keywords.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A flow for generating trending keywords based on business context.\n *\n * This file defines a Genkit flow that simulates fetching trending keywords from various\n * data sources. It uses a \"tool-based\" approach where the AI is instructed to use\n * a simulated tool (`getSearchTrendData`) to gather information before presenting its findings.\n * This makes the simulation more realistic and the output more structured.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'zod';\nimport {\n  GenerateTrendingKeywordsInputSchema,\n  GenerateTrendingKeywordsOutputSchema,\n  type GenerateTrendingKeywordsInput,\n  type GenerateTrendingKeywordsOutput,\n  KeywordSchema,\n} from '@/ai/types';\n\n// Define the simulated tool for getting search trend data.\nconst getSearchTrendData = ai.defineTool(\n  {\n    name: 'getSearchTrendData',\n    description:\n      'Provides a list of trending keywords with their search volume, trend change, and SEO difficulty. This is a simulation.',\n    inputSchema: z.object({\n      businessType: z\n        .string()\n        .describe('The type of business to get keyword trends for.'),\n      country: z.string().describe('The target country for the trends.'),\n      city: z.string().optional().describe('The target city for the trends.'),\n    }),\n    outputSchema: z.object({\n      hour: z.array(KeywordSchema),\n      day: z.array(KeywordSchema),\n      week: z.array(KeywordSchema),\n      month: z.array(KeywordSchema),\n    }),\n  },\n  async (input) => {\n    // In a real application, this would call an external API (e.g., Google Trends, SEMrush).\n    // Here, we are returning realistic but randomly generated data to simulate the tool's output.\n    // The AI will receive this data and use it to answer the user's request.\n\n    const generateKeywords = (count: number, volumeMultiplier: number, changeRange: number) => {\n      return Array.from({length: count}, (_, i) => ({\n        id: `${Math.random().toString(36).substring(7)}-${i}`,\n        name: `Simulated Keyword ${i + 1} for ${input.businessType}`,\n        volume: Math.floor(Math.random() * 1000 * volumeMultiplier),\n        change: Math.floor(Math.random() * (changeRange * 2)) - changeRange, // e.g., -10 to 10\n        difficulty: Math.floor(Math.random() * 100),\n        serpFeatures: ['Featured Snippet', 'People Also Ask'].slice(0, Math.floor(Math.random() * 3)),\n        sources: ['getSearchTrendData'],\n      }));\n    };\n    \n    return {\n      hour: generateKeywords(3, 1, 20),\n      day: generateKeywords(5, 10, 15),\n      week: generateKeywords(10, 50, 10),\n      month: generateKeywords(15, 100, 5),\n    };\n  }\n);\n\n\n/**\n * Generates a list of trending keywords for different timeframes.\n * This is the main entry point to be called from the application server.\n * @param input - The business context for which to generate keywords.\n * @returns A promise that resolves to an object containing keywords for different timeframes.\n */\nexport async function generateTrendingKeywords(\n  input: GenerateTrendingKeywordsInput\n): Promise<GenerateTrendingKeywordsOutput> {\n  // This flow now calls the tool to get the data.\n  return await generateTrendingKeywordsFlow(input);\n}\n\n\n// Define the Genkit prompt which now uses the tool.\nconst generateTrendingKeywordsPrompt = ai.definePrompt({\n  name: 'generateTrendingKeywordsPrompt',\n  input: {schema: GenerateTrendingKeywordsInputSchema},\n  output: {schema: GenerateTrendingKeywordsOutputSchema},\n  tools: [getSearchTrendData],\n  prompt: `\n    You are a market intelligence analyst. Your task is to identify trending keywords for a '{{businessType}}' business\n    in {{country}}{{#if city}}, {{city}}{{/if}}.\n    \n    Use the getSearchTrendData tool to fetch the required keyword data.\n    \n    Once you have the data from the tool, format it and return it to the user.\n    Do not add any extra commentary. Your entire response should be the JSON data structure from the tool.\n  `,\n});\n\n// Define the Genkit flow that orchestrates the keyword generation.\nconst generateTrendingKeywordsFlow = ai.defineFlow(\n  {\n    name: 'generateTrendingKeywordsFlow',\n    inputSchema: GenerateTrendingKeywordsInputSchema,\n    outputSchema: GenerateTrendingKeywordsOutputSchema,\n  },\n  async (input) => {\n    const {output} = await generateTrendingKeywordsPrompt(input);\n    // The AI is expected to call the tool and format the output directly.\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;;CAOC,GAED;AACA;AACA;;;;;;;AAQA,2DAA2D;AAC3D,MAAM,qBAAqB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACtC;IACE,MAAM;IACN,aACE;IACF,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACpB,cAAc,oIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CAAC;QACZ,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC7B,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IACvC;IACA,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACrB,MAAM,oIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,kHAAA,CAAA,gBAAa;QAC3B,KAAK,oIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,kHAAA,CAAA,gBAAa;QAC1B,MAAM,oIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,kHAAA,CAAA,gBAAa;QAC3B,OAAO,oIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,kHAAA,CAAA,gBAAa;IAC9B;AACF,GACA,OAAO;IACL,yFAAyF;IACzF,8FAA8F;IAC9F,yEAAyE;IAEzE,MAAM,mBAAmB,CAAC,OAAe,kBAA0B;QACjE,OAAO,MAAM,IAAI,CAAC;YAAC,QAAQ;QAAK,GAAG,CAAC,GAAG,IAAM,CAAC;gBAC5C,IAAI,GAAG,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAAG,CAAC,EAAE,GAAG;gBACrD,MAAM,CAAC,kBAAkB,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,YAAY,EAAE;gBAC5D,QAAQ,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO;gBAC1C,QAAQ,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,CAAC,cAAc,CAAC,KAAK;gBACxD,YAAY,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK;gBACvC,cAAc;oBAAC;oBAAoB;iBAAkB,CAAC,KAAK,CAAC,GAAG,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK;gBAC1F,SAAS;oBAAC;iBAAqB;YACjC,CAAC;IACH;IAEA,OAAO;QACL,MAAM,iBAAiB,GAAG,GAAG;QAC7B,KAAK,iBAAiB,GAAG,IAAI;QAC7B,MAAM,iBAAiB,IAAI,IAAI;QAC/B,OAAO,iBAAiB,IAAI,KAAK;IACnC;AACF;AAUK,eAAe,uCAAsB,GAAtB,yBACpB,KAAoC;IAEpC,gDAAgD;IAChD,OAAO,MAAM,6BAA6B;AAC5C;AAGA,oDAAoD;AACpD,MAAM,iCAAiC,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACrD,MAAM;IACN,OAAO;QAAC,QAAQ,kHAAA,CAAA,sCAAmC;IAAA;IACnD,QAAQ;QAAC,QAAQ,kHAAA,CAAA,uCAAoC;IAAA;IACrD,OAAO;QAAC;KAAmB;IAC3B,QAAQ,CAAC;;;;;;;;EAQT,CAAC;AACH;AAEA,mEAAmE;AACnE,MAAM,+BAA+B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAChD;IACE,MAAM;IACN,aAAa,kHAAA,CAAA,sCAAmC;IAChD,cAAc,kHAAA,CAAA,uCAAoC;AACpD,GACA,OAAO;IACL,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,+BAA+B;IACtD,sEAAsE;IACtE,OAAO;AACT;;;IApCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 694, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-chart-takeaway.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Defines the Genkit flow for generating a chart takeaway.\n *\n * This flow takes chart data and business context to produce a single,\n * insightful sentence summarizing the key takeaway, as a CMO would.\n *\n * The main export is `generateChartTakeaway`.\n */\n\nimport { ai } from '@/ai/genkit';\nimport {\n    GenerateChartTakeawayInputSchema,\n    type GenerateChartTakeawayInput,\n    GenerateChartTakeawayOutputSchema,\n    type GenerateChartTakeawayOutput\n} from '@/ai/types';\n\n\nexport async function generateChartTakeaway(input: GenerateChartTakeawayInput): Promise<GenerateChartTakeawayOutput> {\n    return await generateChartTakeawayFlow(input);\n}\n\n\nconst prompt = ai.definePrompt({\n    name: 'generateChartTakeawayPrompt',\n    input: { schema: GenerateChartTakeawayInputSchema },\n    output: { schema: GenerateChartTakeawayOutputSchema },\n    prompt: `\n        You are a CMO analyzing a keyword volume chart for a \"{{businessType}}\" business.\n        The chart data is as follows: {{keywordChartData}}.\n\n        Based on this data, provide a single, concise, executive-level sentence that summarizes the most important insight or takeaway for a marketing team. Focus on the story the numbers are telling.\n    `,\n});\n\n\nconst generateChartTakeawayFlow = ai.defineFlow(\n    {\n        name: 'generateChartTakeawayFlow',\n        inputSchema: GenerateChartTakeawayInputSchema,\n        outputSchema: GenerateChartTakeawayOutputSchema,\n    },\n    async (input) => {\n        const { output } = await prompt(input);\n        if (!output) {\n            throw new Error('Failed to generate chart takeaway.');\n        }\n        return output;\n    }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;;CAOC,GAED;AACA;;;;;;AAQO,eAAe,uCAAmB,GAAnB,sBAAsB,KAAiC;IACzE,OAAO,MAAM,0BAA0B;AAC3C;AAGA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC3B,MAAM;IACN,OAAO;QAAE,QAAQ,kHAAA,CAAA,mCAAgC;IAAC;IAClD,QAAQ;QAAE,QAAQ,kHAAA,CAAA,oCAAiC;IAAC;IACpD,QAAQ,CAAC;;;;;IAKT,CAAC;AACL;AAGA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACI,MAAM;IACN,aAAa,kHAAA,CAAA,mCAAgC;IAC7C,cAAc,kHAAA,CAAA,oCAAiC;AACnD,GACA,OAAO;IACH,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,IAAI,CAAC,QAAQ;QACT,MAAM,IAAI,MAAM;IACpB;IACA,OAAO;AACX;;;IA9BkB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 753, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/market-deep-dive.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A flow for generating a C-suite level market deep-dive report.\n *\n * This file defines a Genkit flow that uses a \"tool-based\" approach to simulate\n * a comprehensive market analysis. It defines and uses several tools to gather\n * different pieces of information (market size, competitor data, SWOT analysis),\n * making the final report more structured and credible.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'zod';\nimport {\n  MarketDeepDiveInputSchema,\n  MarketDeepDiveOutputSchema,\n  type MarketDeepDiveInput,\n  type MarketDeepDiveOutput,\n} from '@/ai/types';\n\n// Tool to get market sizing data (TAM/SAM/SOM).\nconst getMarketSizeData = ai.defineTool(\n  {\n    name: 'getMarketSizeData',\n    description: 'Provides simulated market sizing data (TAM, SAM, SOM) for a given business type and location.',\n    inputSchema: MarketDeepDiveInputSchema,\n    outputSchema: MarketDeepDiveOutputSchema.shape.tamSamSom,\n  },\n  async (input) => {\n    // In a real application, this would query financial databases or market research reports.\n    // Here, we return a realistic but simulated data structure.\n    const tamValue = Math.floor(Math.random() * 5_000_000_000) + 1_000_000_000;\n    const samValue = tamValue * (Math.random() * 0.2 + 0.1); // SAM is 10-30% of TAM\n    const somValue = samValue * (Math.random() * 0.1 + 0.05); // SOM is 5-15% of SAM\n\n    return {\n      tam: {\n        value: tamValue,\n        description: `Total global demand for solutions related to ${input.businessType}.`,\n        sources: ['Simulated: Gartner Reports', 'Simulated: Statista Market Forecast'],\n      },\n      sam: {\n        value: samValue,\n        description: `The segment of the TAM targeted by products and services for ${input.country}, reachable through sales and marketing channels.`,\n        sources: ['Simulated: Local Government Economic Data', 'Simulated: Industry Association Surveys'],\n      },\n      som: {\n        value: somValue,\n        description: `The portion of SAM that can realistically be captured in the short term, considering competition and resources.`,\n        sources: ['Simulated: Internal Business Projections', 'Simulated: Competitor Annual Reports'],\n      },\n    };\n  }\n);\n\n// Tool to get competitor benchmark data.\nconst getCompetitorBenchmark = ai.defineTool(\n    {\n        name: 'getCompetitorBenchmark',\n        description: 'Provides a simulated benchmark of key competitors.',\n        inputSchema: MarketDeepDiveInputSchema,\n        outputSchema: MarketDeepDiveOutputSchema.shape.competitors,\n    },\n    async (input) => {\n        // Simulation of competitor data.\n        return [\n            { name: `Competitor Alpha for ${input.businessType}`, strengths: 'Strong brand recognition, large user base.', weaknesses: 'Slow to innovate, poor customer support.', marketShare: '35%' },\n            { name: 'Competitor Beta Inc.', strengths: 'Agile development, strong niche community.', weaknesses: 'Limited marketing budget, low brand awareness.', marketShare: '15%' },\n            { name: `Startup Gamma (${input.country})`, strengths: 'Disruptive technology, highly focused.', weaknesses: 'Unproven business model, high burn rate.', marketShare: '5%' },\n        ];\n    }\n);\n\n// Tool to perform a SWOT analysis.\nconst getSwotAnalysis = ai.defineTool(\n    {\n        name: 'getSwotAnalysis',\n        description: 'Provides a simulated SWOT analysis for the given business context.',\n        inputSchema: MarketDeepDiveInputSchema,\n        outputSchema: MarketDeepDiveOutputSchema.shape.swot,\n    },\n    async (input) => {\n        // Simulation of SWOT analysis.\n        return {\n            strengths: [`Unique value proposition for ${input.businessType}.`, 'Experienced founding team.'],\n            weaknesses: ['Limited brand awareness.', 'Dependency on a single supplier.'],\n            opportunities: [`Untapped market segment in ${input.country}.`, 'Leveraging new AI technologies.'],\n            threats: ['New regulations impacting the industry.', 'Price wars from major competitors.'],\n        };\n    }\n);\n\n/**\n * Generates a C-suite level market deep-dive report.\n * This is the main entry point to be called from the application server.\n * @param input - The business context for the report.\n * @returns A promise that resolves to a comprehensive market analysis.\n */\nexport async function marketDeepDive(\n  input: MarketDeepDiveInput\n): Promise<MarketDeepDiveOutput> {\n  return marketDeepDiveFlow(input);\n}\n\n\n// Define the Genkit prompt which now uses multiple tools to build the report.\nconst marketDeepDivePrompt = ai.definePrompt({\n  name: 'marketDeepDivePrompt',\n  input: {schema: MarketDeepDiveInputSchema},\n  output: {schema: MarketDeepDiveOutputSchema},\n  tools: [getMarketSizeData, getCompetitorBenchmark, getSwotAnalysis],\n  prompt: `\n    You are a principal analyst at a top-tier venture capital firm. Your task is to compile an executive-level market deep-dive report\n    for a potential investment in the '{{businessType}}' sector, focusing on the market in {{country}}{{#if city}}, specifically in {{city}}{{/if}}.\n\n    Follow these steps to construct the report:\n    1.  First, call the \\`getMarketSizeData\\` tool to get the TAM/SAM/SOM analysis.\n    2.  Next, call the \\`getCompetitorBenchmark\\` tool to get data on the key competitors.\n    3.  Then, call the \\`getSwotAnalysis\\` tool to perform a SWOT analysis for a new entrant in this market.\n    4.  Finally, synthesize all the gathered information into a cohesive report. Write a concise **Executive Summary** that summarizes the key findings and provides a strategic recommendation.\n    5.  Assemble all the data from the tools and your executive summary into the final JSON output format. Ensure every field is populated correctly.\n  `,\n});\n\n// Define the Genkit flow that orchestrates the market deep-dive report generation.\nconst marketDeepDiveFlow = ai.defineFlow(\n  {\n    name: 'marketDeepDiveFlow',\n    inputSchema: MarketDeepDiveInputSchema,\n    outputSchema: MarketDeepDiveOutputSchema,\n  },\n  async (input) => {\n    const {output} = await marketDeepDivePrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 916, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["// src/app/actions.ts\n'use server';\n\nimport { translateKeywordsArabic } from '@/ai/flows/translate-keywords-arabic';\nimport { seoContentSuggestions } from '@/ai/flows/seo-content-suggestions';\nimport { advancedSeoKeywordAnalysis } from '@/ai/flows/advanced-seo-keyword-analysis';\nimport { generateTrendingKeywords } from '@/ai/flows/generate-trending-keywords';\nimport { generateChartTakeaway } from '@/ai/flows/generate-chart-takeaway';\nimport { marketDeepDive } from '@/ai/flows/market-deep-dive';\n\nimport type {\n  TranslateKeywordsArabicInput,\n  TranslateKeywordsArabicOutput,\n  SeoContentSuggestionsInput,\n  SeoContentSuggestionsOutput,\n  AdvancedSeoKeywordAnalysisInput,\n  AdvancedSeoKeywordAnalysisOutput,\n  GenerateTrendingKeywordsInput,\n  GenerateTrendingKeywordsOutput,\n  GenerateChartTakeawayInput,\n  GenerateChartTakeawayOutput,\n  MarketDeepDiveInput,\n  MarketDeepDiveOutput,\n} from '@/ai/types';\n\n\nexport async function getTrendingKeywordsAction(input: GenerateTrendingKeywordsInput): Promise<{ success: boolean; data?: GenerateTrendingKeywordsOutput; error?: string }> {\n  try {\n    const result = await generateTrendingKeywords(input);\n    return { success: true, data: result };\n  } catch (error) {\n    console.error(\"Error generating trending keywords:\", error);\n    return { success: false, error: (error instanceof Error ? error.message : String(error)) || \"Failed to generate trending keywords.\" };\n  }\n}\n\nexport async function getArabicTranslationsAction(input: TranslateKeywordsArabicInput): Promise<{ success: boolean; data?: TranslateKeywordsArabicOutput; error?: string }> {\n  try {\n    if (!input.keywords || input.keywords.length === 0) {\n      return { success: true, data: { translatedKeywords: [] } };\n    }\n    const result = await translateKeywordsArabic(input);\n    return { success: true, data: result };\n  } catch (error) {\n    console.error(\"Error translating keywords to Arabic:\", error);\n    return { success: false, error: (error instanceof Error ? error.message : String(error)) || \"Failed to translate keywords.\" };\n  }\n}\n\nexport async function getSeoSuggestionsAction(input: SeoContentSuggestionsInput): Promise<{ success: boolean; data?: SeoContentSuggestionsOutput; error?: string }> {\n  try {\n    const result = await seoContentSuggestions(input);\n    if (result && result.suggestions) {\n      return { success: true, data: result };\n    }\n    return { success: false, error: \"Failed to get valid SEO suggestions. The AI did not return expected data.\"};\n  } catch (error) {\n    console.error(\"Error getting SEO suggestions:\", error);\n    return { success: false, error: (error instanceof Error ? error.message : String(error)) || \"Failed to get SEO suggestions.\" };\n  }\n}\n\nexport async function getAdvancedSeoAnalysisAction(input: AdvancedSeoKeywordAnalysisInput): Promise<{ success: boolean; data?: AdvancedSeoKeywordAnalysisOutput; error?: string }> {\n  try {\n    const result = await advancedSeoKeywordAnalysis(input);\n    return { success: true, data: result };\n  } catch (error) {\n    console.error(\"Error getting advanced SEO analysis:\", error);\n    return { success: false, error: (error instanceof Error ? error.message : String(error)) || \"Failed to get advanced SEO analysis.\" };\n  }\n}\n\nexport async function getChartTakeawayAction(input: GenerateChartTakeawayInput): Promise<{ success: boolean; data?: GenerateChartTakeawayOutput; error?: string }> {\n    try {\n        const result = await generateChartTakeaway(input);\n        return { success: true, data: result };\n    } catch (error) {\n        console.error(\"Error generating chart takeaway:\", error);\n        return { success: false, error: (error instanceof Error ? error.message : String(error)) || \"Failed to generate chart takeaway.\" };\n    }\n}\n\nexport async function getMarketDeepDiveAction(input: MarketDeepDiveInput): Promise<{ success: boolean; data?: MarketDeepDiveOutput; error?: string }> {\n  try {\n    const result = await marketDeepDive(input);\n    return { success: true, data: result };\n  } catch (error) {\n    console.error(\"Error generating market deep-dive:\", error);\n    return { success: false, error: (error instanceof Error ? error.message : String(error)) || \"Failed to generate market deep-dive.\" };\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1067, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1133, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 1147, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA","debugId":null}},
    {"offset": {"line": 1161, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}