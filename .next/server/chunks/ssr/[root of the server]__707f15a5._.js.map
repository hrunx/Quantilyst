{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/types.ts"],"sourcesContent":["/**\n * @fileOverview Centralized type definitions and Zod schemas for all AI flows.\n * This file does not contain 'use server' and can be safely imported into both\n * server and client components.\n */\n\nimport { z } from 'zod';\n\n// For: src/ai/flows/advanced-seo-keyword-analysis.ts\nexport const AdvancedSeoKeywordAnalysisInputSchema = z.object({\n  businessType: z.string().describe('The type of business or industry being analyzed.'),\n  keyword: z.string().describe('The specific keyword to analyze.'),\n});\nexport type AdvancedSeoKeywordAnalysisInput = z.infer<typeof AdvancedSeoKeywordAnalysisInputSchema>;\n\nexport const AdvancedSeoKeywordAnalysisOutputSchema = z.object({\n  searchIntent: z.string().describe(\"The primary user intent behind the keyword (e.g., Informational, Commercial, Transactional, Navigational).\"),\n  targetAudience: z.string().describe(\"A description of the ideal target audience for this keyword.\"),\n  competitiveLandscape: z.string().describe(\"An analysis of the current top-ranking content and competition level.\"),\n  contentAngle: z.string().describe(\"A unique or compelling angle to take for content creation to stand out.\"),\n  longTailKeywords: z.array(z.string()).describe(\"A list of related, more specific long-tail keywords.\"),\n  relatedQuestions: z.array(z.string()).describe(\"A list of common questions users are asking related to the keyword.\"),\n  detailedContentOutline: z.object({\n    title: z.string().describe(\"A compelling, SEO-friendly title for a piece of content.\"),\n    sections: z.array(z.object({\n      heading: z.string().describe(\"The heading for a section of the content.\"),\n      points: z.array(z.string()).describe(\"Key talking points or details to include in this section.\"),\n    })).describe(\"An array of sections that make up the content outline.\"),\n  }),\n  difficultyAnalysis: z.string().describe(\"A qualitative analysis of why this keyword is easy, medium, or hard to rank for.\"),\n  confidenceScore: z.number().int().min(0).max(100).describe('A score from 0-100 indicating the confidence in the provided analysis.'),\n  simulatedSources: z.array(z.string().url()).describe('A list of simulated source URLs used for the analysis.'),\n});\nexport type AdvancedSeoKeywordAnalysisOutput = z.infer<typeof AdvancedSeoKeywordAnalysisOutputSchema>;\n\n\n// For: src/ai/flows/generate-chart-takeaway.ts\nexport const GenerateChartTakeawayInputSchema = z.object({\n    businessType: z.string().describe('The industry or business type for context.'),\n    keywordChartData: z.string().describe('A JSON string representing the data used in the chart. Example: \\'[{\"name\":\"Keyword A\",\"volume\":12000},{\"name\":\"Keyword B\",\"volume\":9500}]\\'')\n});\nexport type GenerateChartTakeawayInput = z.infer<typeof GenerateChartTakeawayInputSchema>;\n\nexport const GenerateChartTakeawayOutputSchema = z.object({\n    takeaway: z.string().describe('A single, concise, CMO-level sentence summarizing the key insight from the chart data.'),\n});\nexport type GenerateChartTakeawayOutput = z.infer<typeof GenerateChartTakeawayOutputSchema>;\n\n\n// For: src/ai/flows/generate-trending-keywords.ts\nexport const GenerateTrendingKeywordsInputSchema = z.object({\n  businessType: z.string().describe('The type of business or industry being analyzed.'),\n  country: z.string().describe('The target country for the analysis.'),\n  city: z.string().optional().describe('The optional target city for more specific local analysis.'),\n});\nexport type GenerateTrendingKeywordsInput = z.infer<typeof GenerateTrendingKeywordsInputSchema>;\n\nconst KeywordSchema = z.object({\n  id: z.string().describe(\"A unique identifier for the keyword, e.g., 'w1'.\"),\n  name: z.string().describe(\"The keyword phrase.\"),\n  volume: z.number().int().describe(\"An estimated search volume or trend score.\"),\n  change: z.number().describe(\"The percentage change over the time period.\"),\n  difficulty: z.number().int().min(0).max(100).describe(\"An SEO difficulty score from 0 to 100.\"),\n  serpFeatures: z.array(z.string()).describe(\"A list of observed SERP features, like 'Featured Snippet' or 'Local Pack'.\"),\n});\nexport type Keyword = z.infer<typeof KeywordSchema>;\n\nexport const GenerateTrendingKeywordsOutputSchema = z.object({\n  hour: z.array(KeywordSchema).describe('Trending keywords for the past hour.'),\n  day: z.array(KeywordSchema).describe('Trending keywords for the past day.'),\n  week: z.array(KeywordSchema).describe('Trending keywords for the past week.'),\n  month: z.array(KeywordSchema).describe('Trending keywords for the past month.'),\n});\nexport type GenerateTrendingKeywordsOutput = z.infer<typeof GenerateTrendingKeywordsOutputSchema>;\n\n\n// For: src/ai/flows/market-deep-dive.ts\nexport const MarketDeepDiveInputSchema = z.object({\n  businessType: z.string().describe('The type of business or industry being analyzed.'),\n  country: z.string().describe('The target country for the analysis.'),\n  city: z.string().optional().describe('The optional target city for more specific local analysis.'),\n});\nexport type MarketDeepDiveInput = z.infer<typeof MarketDeepDiveInputSchema>;\n\nconst MarketSizeSchema = z.object({\n  value: z.number().int().describe('The estimated market size value in USD.'),\n  description: z.string().describe('A brief description of what this market size represents.'),\n  sources: z.array(z.string().url()).describe('A list of simulated source URLs for this data point.'),\n});\n\nexport const MarketDeepDiveOutputSchema = z.object({\n  executiveSummary: z.string().describe('A concise, C-suite level overview of the market analysis.'),\n  tamSamSom: z.object({\n    tam: MarketSizeSchema.describe('Total Addressable Market'),\n    sam: MarketSizeSchema.describe('Serviceable Addressable Market'),\n    som: MarketSizeSchema.describe('Serviceable Obtainable Market'),\n  }),\n  competitors: z.array(z.object({\n    name: z.string().describe('The name of the competitor.'),\n    strengths: z.string().describe('Key strengths of the competitor.'),\n    weaknesses: z.string().describe('Key weaknesses of the competitor.'),\n    marketShare: z.string().describe('Estimated market share as a percentage string, e.g., \"15%\".'),\n  })),\n  swot: z.object({\n    strengths: z.array(z.string()).describe('Strengths of the business in this market.'),\n    weaknesses: z.array(z.string()).describe('Weaknesses of the business in this market.'),\n    opportunities: z.array(z.string()).describe('Market opportunities available.'),\n    threats: z.array(z.string()).describe('Market threats to be aware of.'),\n  }),\n});\nexport type MarketDeepDiveOutput = z.infer<typeof MarketDeepDiveOutputSchema>;\n\n\n// For: src/ai/flows/seo-content-suggestions.ts\nexport const SeoContentSuggestionsInputSchema = z.object({\n  businessType: z.string().describe(\"The user's business type or industry for context.\"),\n  trendingKeywords: z.string().describe(\"A comma-separated string of current trending keywords to base the content on.\"),\n});\nexport type SeoContentSuggestionsInput = z.infer<typeof SeoContentSuggestionsInputSchema>;\n\nexport const SeoContentSuggestionsOutputSchema = z.object({\n  suggestions: z.array(z.object({\n    title: z.string().describe(\"A compelling, SEO-friendly title for the content brief.\"),\n    hook: z.string().describe(\"An engaging hook or opening line to capture the reader's attention.\"),\n    points: z.array(z.string()).describe(\"A list of key talking points or sections for the content.\"),\n  })),\n});\nexport type SeoContentSuggestionsOutput = z.infer<typeof SeoContentSuggestionsOutputSchema>;\n\n\n// For: src/ai/flows/translate-keywords-arabic.ts\nexport const TranslateKeywordsArabicInputSchema = z.object({\n    businessType: z.string().describe('The business type for context.'),\n    keywords: z.array(z.string()).describe('An array of English keywords to translate.'),\n});\nexport type TranslateKeywordsArabicInput = z.infer<typeof TranslateKeywordsArabicInputSchema>;\n\nexport const TranslateKeywordsArabicOutputSchema = z.object({\n  translatedKeywords: z.array(\n    z.object({\n      keyword: z.string().describe('The translated keyword in Arabic.'),\n      volume: z.number().int().describe('The estimated search volume for the Arabic keyword.'),\n      change: z.number().describe('The estimated trend change percentage for the Arabic keyword.'),\n    })\n  ),\n});\nexport type TranslateKeywordsArabicOutput = z.infer<typeof TranslateKeywordsArabicOutputSchema>;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 362, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/translate-keywords-arabic.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Defines the Genkit flow for translating keywords to Arabic.\n *\n * This flow translates a list of English keywords to Arabic, focusing on the KSA market,\n * and provides simulated trend data for the translated keywords.\n *\n * The main export is `translateKeywordsArabic`.\n */\n\nimport { ai } from '@/ai/genkit';\nimport {\n    TranslateKeywordsArabicInputSchema,\n    type TranslateKeywordsArabicInput,\n    TranslateKeywordsArabicOutputSchema,\n    type TranslateKeywordsArabicOutput\n} from '@/ai/types';\n\nexport async function translateKeywordsArabic(\n  input: TranslateKeywordsArabicInput\n): Promise<TranslateKeywordsArabicOutput> {\n  return await translateKeywordsArabicFlow(input);\n}\n\n\nconst prompt = ai.definePrompt({\n  name: 'translateKeywordsArabicPrompt',\n  input: { schema: TranslateKeywordsArabicInputSchema },\n  output: { schema: TranslateKeywordsArabicOutputSchema },\n  prompt: `\n    You are an expert marketing translator specializing in the Saudi Arabia (KSA) market for a \"{{businessType}}\" business.\n    Translate the following English keywords into natural, market-appropriate Arabic.\n    \n    Keywords to translate: {{jsonStringify keywords}}\n\n    For each translated keyword, provide a realistic estimated search volume and a trend change percentage in the required JSON format.\n  `,\n});\n\nconst translateKeywordsArabicFlow = ai.defineFlow(\n  {\n    name: 'translateKeywordsArabicFlow',\n    inputSchema: TranslateKeywordsArabicInputSchema,\n    outputSchema: TranslateKeywordsArabicOutputSchema,\n  },\n  async (input) => {\n    const { output } = await prompt(input);\n    if (!output) {\n      throw new Error('Failed to translate keywords to Arabic.');\n    }\n    return output;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;;CAOC,GAED;AACA;;;;;;AAOO,eAAe,uCAAqB,GAArB,wBACpB,KAAmC;IAEnC,OAAO,MAAM,4BAA4B;AAC3C;AAGA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAE,QAAQ,kHAAA,CAAA,qCAAkC;IAAC;IACpD,QAAQ;QAAE,QAAQ,kHAAA,CAAA,sCAAmC;IAAC;IACtD,QAAQ,CAAC;;;;;;;EAOT,CAAC;AACH;AAEA,MAAM,8BAA8B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC/C;IACE,MAAM;IACN,aAAa,kHAAA,CAAA,qCAAkC;IAC/C,cAAc,kHAAA,CAAA,sCAAmC;AACnD,GACA,OAAO;IACL,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;;;IAjCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 423, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/seo-content-suggestions.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview This file defines the Genkit flow for generating SEO content suggestions.\n *\n * This flow provides actionable content briefs based on trending keywords for a given\n * business type. Each brief includes a title, hook, and key talking points.\n *\n * The main export is `seoContentSuggestions`.\n */\n\nimport { ai } from '@/ai/genkit';\nimport {\n  SeoContentSuggestionsInputSchema,\n  type SeoContentSuggestionsInput,\n  SeoContentSuggestionsOutputSchema,\n  type SeoContentSuggestionsOutput,\n} from '@/ai/types';\n\n\nexport async function seoContentSuggestions(\n  input: SeoContentSuggestionsInput\n): Promise<SeoContentSuggestionsOutput> {\n  return await seoContentSuggestionsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'seoContentSuggestionsPrompt',\n  input: { schema: SeoContentSuggestionsInputSchema },\n  output: { schema: SeoContentSuggestionsOutputSchema },\n  prompt: `\n    You are an expert Content Strategist for a \"{{businessType}}\" business.\n    Based on the following trending keywords: \"{{trendingKeywords}}\", generate 3 distinct and actionable content briefs.\n\n    Each brief in the \"suggestions\" array must be a JSON object containing:\n    1.  **title**: A compelling, SEO-friendly title for the content.\n    2.  **hook**: An engaging opening line or hook to capture the reader's attention.\n    3.  **points**: A list of 3-4 key talking points or sections that should be covered in the content.\n  `,\n});\n\nconst seoContentSuggestionsFlow = ai.defineFlow(\n  {\n    name: 'seoContentSuggestionsFlow',\n    inputSchema: SeoContentSuggestionsInputSchema,\n    outputSchema: SeoContentSuggestionsOutputSchema,\n  },\n  async (input) => {\n    const { output } = await prompt(input);\n    if (!output) {\n      throw new Error('Failed to generate SEO content suggestions.');\n    }\n    return output;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;;CAOC,GAED;AACA;;;;;;AAQO,eAAe,uCAAmB,GAAnB,sBACpB,KAAiC;IAEjC,OAAO,MAAM,0BAA0B;AACzC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAE,QAAQ,kHAAA,CAAA,mCAAgC;IAAC;IAClD,QAAQ;QAAE,QAAQ,kHAAA,CAAA,oCAAiC;IAAC;IACpD,QAAQ,CAAC;;;;;;;;EAQT,CAAC;AACH;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa,kHAAA,CAAA,mCAAgC;IAC7C,cAAc,kHAAA,CAAA,oCAAiC;AACjD,GACA,OAAO;IACL,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;;;IAjCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 485, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/advanced-seo-keyword-analysis.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview This file defines the Genkit flow for advanced SEO keyword analysis.\n *\n * This flow provides a deep, CMO-level strategic brief for a given keyword, including\n * search intent, target audience, competitive landscape, content angles, and more.\n *\n * The main export is `advancedSeoKeywordAnalysis`, which is the entry point for this flow.\n */\n\nimport { ai } from '@/ai/genkit';\nimport {\n  AdvancedSeoKeywordAnalysisInputSchema,\n  type AdvancedSeoKeywordAnalysisInput,\n  AdvancedSeoKeywordAnalysisOutputSchema,\n  type AdvancedSeoKeywordAnalysisOutput,\n} from '@/ai/types';\n\nexport async function advancedSeoKeywordAnalysis(\n  input: AdvancedSeoKeywordAnalysisInput\n): Promise<AdvancedSeoKeywordAnalysisOutput> {\n  return await advancedSeoKeywordAnalysisFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'advancedSeoKeywordAnalysisPrompt',\n  input: { schema: AdvancedSeoKeywordAnalysisInputSchema },\n  output: { schema: AdvancedSeoKeywordAnalysisOutputSchema },\n  prompt: `\n    You are a world-class CMO and SEO strategist. Your task is to provide a comprehensive, investor-grade strategic brief for the keyword: \"{{keyword}}\" in the context of a \"{{businessType}}\" business.\n\n    Analyze the keyword and provide the following insights in the required JSON format:\n\n    1.  **searchIntent**: Classify the user's primary intent (e.g., \"Informational\", \"Commercial Investigation\", \"Transactional\", \"Navigational\").\n    2.  **targetAudience**: Describe the ideal person searching for this keyword. Be specific about their role, goals, and pain points.\n    3.  **competitiveLandscape**: Briefly analyze the top-ranking results. What kind of content is succeeding (e.g., blog posts, videos, tools)? What is the general difficulty?\n    4.  **contentAngle**: Propose a unique, compelling angle for a piece of content that would stand out from the competition.\n    5.  **longTailKeywords**: Generate 5-7 related, more specific long-tail keywords.\n    6.  **relatedQuestions**: List 5-7 common questions users ask related to this keyword (suitable for \"People Also Ask\" sections).\n    7.  **detailedContentOutline**: Create a detailed content outline with a compelling title and at least 3-4 section headings. Each section should have 2-3 bullet points outlining the key talking points.\n    8.  **difficultyAnalysis**: Provide a brief, qualitative explanation of the ranking difficulty. Consider factors like competitor authority, content type, and intent.\n    9.  **confidenceScore**: Provide a confidence score (0-100) for your analysis based on the clarity of the keyword and business context.\n    10. **simulatedSources**: List 3-5 simulated but realistic-looking URLs of sources you might have consulted for this analysis (e.g., 'https://blog.hubspot.com/marketing/seo-strategy', 'https://moz.com/beginners-guide-to-seo').\n  `,\n});\n\nconst advancedSeoKeywordAnalysisFlow = ai.defineFlow(\n  {\n    name: 'advancedSeoKeywordAnalysisFlow',\n    inputSchema: AdvancedSeoKeywordAnalysisInputSchema,\n    outputSchema: AdvancedSeoKeywordAnalysisOutputSchema,\n  },\n  async (input) => {\n    const { output } = await prompt(input);\n    if (!output) {\n      throw new Error('Failed to generate advanced SEO analysis.');\n    }\n    return output;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;;CAOC,GAED;AACA;;;;;;AAOO,eAAe,uCAAwB,GAAxB,2BACpB,KAAsC;IAEtC,OAAO,MAAM,+BAA+B;AAC9C;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAE,QAAQ,kHAAA,CAAA,wCAAqC;IAAC;IACvD,QAAQ;QAAE,QAAQ,kHAAA,CAAA,yCAAsC;IAAC;IACzD,QAAQ,CAAC;;;;;;;;;;;;;;;EAeT,CAAC;AACH;AAEA,MAAM,iCAAiC,mHAAA,CAAA,KAAE,CAAC,UAAU,CAClD;IACE,MAAM;IACN,aAAa,kHAAA,CAAA,wCAAqC;IAClD,cAAc,kHAAA,CAAA,yCAAsC;AACtD,GACA,OAAO;IACL,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;;;IAxCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 554, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-trending-keywords.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview This file defines the Genkit flow for generating trending keywords.\n *\n * This flow acts as a Market Trend Analysis Engine, taking a business type and location\n * to generate a realistic and relevant set of trending keywords for different timeframes.\n *\n * The main export is `generateTrendingKeywords`.\n */\n\nimport { ai } from '@/ai/genkit';\nimport {\n  GenerateTrendingKeywordsInputSchema,\n  type GenerateTrendingKeywordsInput,\n  GenerateTrendingKeywordsOutputSchema,\n  type GenerateTrendingKeywordsOutput,\n} from '@/ai/types';\n\n\nexport async function generateTrendingKeywords(\n  input: GenerateTrendingKeywordsInput\n): Promise<GenerateTrendingKeywordsOutput> {\n  return await generateTrendingKeywordsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateTrendingKeywordsPrompt',\n  input: { schema: GenerateTrendingKeywordsInputSchema },\n  output: { schema: GenerateTrendingKeywordsOutputSchema },\n  prompt: `\n    You are a Market Trend Analysis Engine. Your task is to generate a list of trending keywords for a \"{{businessType}}\" business located in {{country}}{{#if city}}, {{city}}{{/if}}.\n\n    The keywords must be highly relevant to the business type and location provided. Do NOT include generic, unrelated, or placeholder keywords like \"sustainable business practices\" unless it is directly relevant to the query.\n\n    Generate realistic-looking data for each keyword, including:\n    - id: A unique identifier (e.g., h1, d1, w1, m1).\n    - name: The keyword phrase.\n    - volume: An estimated search volume or trend score. This should vary realistically across different timeframes.\n    - change: The percentage change. This should be dynamic.\n    - difficulty: An SEO difficulty score from 0-100.\n    - serpFeatures: A list of 0-2 relevant SERP features (e.g., \"Featured Snippet\", \"Local Pack\", \"News Carousel\", \"Video Carousel\", \"People Also Ask\").\n\n    Provide lists for the past hour, day, week, and month. The number of keywords should be smaller for shorter timeframes (e.g., 3-4 for hour/day) and larger for longer ones (e.g., 5-10 for week/month). Ensure the data is plausible and contextually appropriate.\n  `,\n});\n\nconst generateTrendingKeywordsFlow = ai.defineFlow(\n  {\n    name: 'generateTrendingKeywordsFlow',\n    inputSchema: GenerateTrendingKeywordsInputSchema,\n    outputSchema: GenerateTrendingKeywordsOutputSchema,\n  },\n  async (input) => {\n    const { output } = await prompt(input);\n    if (!output) {\n      throw new Error('Failed to generate trending keywords.');\n    }\n    return output;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;;CAOC,GAED;AACA;;;;;;AAQO,eAAe,uCAAsB,GAAtB,yBACpB,KAAoC;IAEpC,OAAO,MAAM,6BAA6B;AAC5C;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAE,QAAQ,kHAAA,CAAA,sCAAmC;IAAC;IACrD,QAAQ;QAAE,QAAQ,kHAAA,CAAA,uCAAoC;IAAC;IACvD,QAAQ,CAAC;;;;;;;;;;;;;;EAcT,CAAC;AACH;AAEA,MAAM,+BAA+B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAChD;IACE,MAAM;IACN,aAAa,kHAAA,CAAA,sCAAmC;IAChD,cAAc,kHAAA,CAAA,uCAAoC;AACpD,GACA,OAAO;IACL,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;;;IAvCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 622, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-chart-takeaway.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Defines the Genkit flow for generating a chart takeaway.\n *\n * This flow takes chart data and business context to produce a single,\n * insightful sentence summarizing the key takeaway, as a CMO would.\n *\n * The main export is `generateChartTakeaway`.\n */\n\nimport { ai } from '@/ai/genkit';\nimport {\n    GenerateChartTakeawayInputSchema,\n    type GenerateChartTakeawayInput,\n    GenerateChartTakeawayOutputSchema,\n    type GenerateChartTakeawayOutput\n} from '@/ai/types';\n\n\nexport async function generateChartTakeaway(input: GenerateChartTakeawayInput): Promise<GenerateChartTakeawayOutput> {\n    return await generateChartTakeawayFlow(input);\n}\n\n\nconst prompt = ai.definePrompt({\n    name: 'generateChartTakeawayPrompt',\n    input: { schema: GenerateChartTakeawayInputSchema },\n    output: { schema: GenerateChartTakeawayOutputSchema },\n    prompt: `\n        You are a CMO analyzing a keyword volume chart for a \"{{businessType}}\" business.\n        The chart data is as follows: {{keywordChartData}}.\n\n        Based on this data, provide a single, concise, executive-level sentence that summarizes the most important insight or takeaway for a marketing team. Focus on the story the numbers are telling.\n    `,\n});\n\n\nconst generateChartTakeawayFlow = ai.defineFlow(\n    {\n        name: 'generateChartTakeawayFlow',\n        inputSchema: GenerateChartTakeawayInputSchema,\n        outputSchema: GenerateChartTakeawayOutputSchema,\n    },\n    async (input) => {\n        const { output } = await prompt(input);\n        if (!output) {\n            throw new Error('Failed to generate chart takeaway.');\n        }\n        return output;\n    }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;;CAOC,GAED;AACA;;;;;;AAQO,eAAe,uCAAmB,GAAnB,sBAAsB,KAAiC;IACzE,OAAO,MAAM,0BAA0B;AAC3C;AAGA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC3B,MAAM;IACN,OAAO;QAAE,QAAQ,kHAAA,CAAA,mCAAgC;IAAC;IAClD,QAAQ;QAAE,QAAQ,kHAAA,CAAA,oCAAiC;IAAC;IACpD,QAAQ,CAAC;;;;;IAKT,CAAC;AACL;AAGA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACI,MAAM;IACN,aAAa,kHAAA,CAAA,mCAAgC;IAC7C,cAAc,kHAAA,CAAA,oCAAiC;AACnD,GACA,OAAO;IACH,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,IAAI,CAAC,QAAQ;QACT,MAAM,IAAI,MAAM;IACpB;IACA,OAAO;AACX;;;IA9BkB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 681, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/market-deep-dive.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Defines the Genkit flow for generating a comprehensive market deep-dive report.\n *\n * This flow acts as a virtual consultant, providing a C-suite level report including\n * TAM/SAM/SOM analysis, competitor benchmarks, and a full SWOT analysis.\n *\n * The main export is `marketDeepDive`.\n */\n\nimport { ai } from '@/ai/genkit';\nimport {\n    MarketDeepDiveInputSchema,\n    type MarketDeepDiveInput,\n    MarketDeepDiveOutputSchema,\n    type MarketDeepDiveOutput\n} from '@/ai/types';\n\n\nexport async function marketDeepDive(input: MarketDeepDiveInput): Promise<MarketDeepDiveOutput> {\n    return await marketDeepDiveFlow(input);\n}\n\n\nconst prompt = ai.definePrompt({\n    name: 'marketDeepDivePrompt',\n    input: { schema: MarketDeepDiveInputSchema },\n    output: { schema: MarketDeepDiveOutputSchema },\n    prompt: `\n        You are a top-tier market research consultant. Your client is a \"{{businessType}}\" business analyzing the market in {{country}}{{#if city}}, {{city}}{{/if}}.\n        \n        Generate a comprehensive, C-suite level deep-dive report in the required JSON format. The data should be realistic and insightful.\n\n        1.  **executiveSummary**: Write a concise, professional summary of the market landscape, opportunities, and challenges for the client.\n        2.  **tamSamSom**: Provide an estimated market sizing analysis.\n            *   **tam**: Total Addressable Market. Include a realistic value in USD, a description, and 2-3 simulated source URLs (e.g., from Statista, Gartner, MarketResearch.com).\n            *   **sam**: Serviceable Addressable Market. Include a realistic value, description, and sources.\n            *   **som**: Serviceable Obtainable Market. Include a realistic value, description, and sources.\n        3.  **competitors**: Identify 3-4 key competitors. For each, provide their name, key strengths, key weaknesses, and an estimated market share percentage.\n        4.  **swot**: Conduct a SWOT analysis for the client's business in this market. Provide 3-4 bullet points for each category: Strengths, Weaknesses, Opportunities, and Threats.\n    `,\n});\n\n\nconst marketDeepDiveFlow = ai.defineFlow(\n    {\n        name: 'marketDeepDiveFlow',\n        inputSchema: MarketDeepDiveInputSchema,\n        outputSchema: MarketDeepDiveOutputSchema,\n    },\n    async (input) => {\n        const { output } = await prompt(input);\n        if (!output) {\n            throw new Error('Failed to generate market deep-dive report.');\n        }\n        return output;\n    }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;;CAOC,GAED;AACA;;;;;;AAQO,eAAe,uCAAY,GAAZ,eAAe,KAA0B;IAC3D,OAAO,MAAM,mBAAmB;AACpC;AAGA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC3B,MAAM;IACN,OAAO;QAAE,QAAQ,kHAAA,CAAA,4BAAyB;IAAC;IAC3C,QAAQ;QAAE,QAAQ,kHAAA,CAAA,6BAA0B;IAAC;IAC7C,QAAQ,CAAC;;;;;;;;;;;;IAYT,CAAC;AACL;AAGA,MAAM,qBAAqB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACpC;IACI,MAAM;IACN,aAAa,kHAAA,CAAA,4BAAyB;IACtC,cAAc,kHAAA,CAAA,6BAA0B;AAC5C,GACA,OAAO;IACH,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,IAAI,CAAC,QAAQ;QACT,MAAM,IAAI,MAAM;IACpB;IACA,OAAO;AACX;;;IArCkB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 747, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n// src/app/actions.ts\n'use server';\n\nimport { translateKeywordsArabic } from '@/ai/flows/translate-keywords-arabic';\nimport { seoContentSuggestions } from '@/ai/flows/seo-content-suggestions';\nimport { advancedSeoKeywordAnalysis } from '@/ai/flows/advanced-seo-keyword-analysis';\nimport { generateTrendingKeywords } from '@/ai/flows/generate-trending-keywords';\nimport { generateChartTakeaway } from '@/ai/flows/generate-chart-takeaway';\nimport { marketDeepDive } from '@/ai/flows/market-deep-dive';\n\nimport type {\n  TranslateKeywordsArabicInput,\n  TranslateKeywordsArabicOutput,\n  SeoContentSuggestionsInput,\n  SeoContentSuggestionsOutput,\n  AdvancedSeoKeywordAnalysisInput,\n  AdvancedSeoKeywordAnalysisOutput,\n  GenerateTrendingKeywordsInput,\n  GenerateTrendingKeywordsOutput,\n  GenerateChartTakeawayInput,\n  GenerateChartTakeawayOutput,\n  MarketDeepDiveInput,\n  MarketDeepDiveOutput,\n} from '@/ai/types';\n\n\nexport async function getTrendingKeywordsAction(input: GenerateTrendingKeywordsInput): Promise<{ success: boolean; data?: GenerateTrendingKeywordsOutput; error?: string }> {\n  try {\n    const result = await generateTrendingKeywords(input);\n    return { success: true, data: result };\n  } catch (error) {\n    console.error(\"Error generating trending keywords:\", error);\n    return { success: false, error: (error instanceof Error ? error.message : String(error)) || \"Failed to generate trending keywords.\" };\n  }\n}\n\nexport async function getArabicTranslationsAction(input: TranslateKeywordsArabicInput): Promise<{ success: boolean; data?: TranslateKeywordsArabicOutput; error?: string }> {\n  try {\n    if (!input.keywords || input.keywords.length === 0) {\n      return { success: true, data: { translatedKeywords: [] } };\n    }\n    const result = await translateKeywordsArabic(input);\n    return { success: true, data: result };\n  } catch (error) {\n    console.error(\"Error translating keywords to Arabic:\", error);\n    return { success: false, error: (error instanceof Error ? error.message : String(error)) || \"Failed to translate keywords.\" };\n  }\n}\n\nexport async function getSeoSuggestionsAction(input: SeoContentSuggestionsInput): Promise<{ success: boolean; data?: SeoContentSuggestionsOutput; error?: string }> {\n  try {\n    const result = await seoContentSuggestions(input);\n    if (result && result.suggestions) {\n      return { success: true, data: result };\n    }\n    return { success: false, error: \"Failed to get valid SEO suggestions. The AI did not return expected data.\"};\n  } catch (error) {\n    console.error(\"Error getting SEO suggestions:\", error);\n    return { success: false, error: (error instanceof Error ? error.message : String(error)) || \"Failed to get SEO suggestions.\" };\n  }\n}\n\nexport async function getAdvancedSeoAnalysisAction(input: AdvancedSeoKeywordAnalysisInput): Promise<{ success: boolean; data?: AdvancedSeoKeywordAnalysisOutput; error?: string }> {\n  try {\n    const result = await advancedSeoKeywordAnalysis(input);\n    return { success: true, data: result };\n  } catch (error) {\n    console.error(\"Error getting advanced SEO analysis:\", error);\n    return { success: false, error: (error instanceof Error ? error.message : String(error)) || \"Failed to get advanced SEO analysis.\" };\n  }\n}\n\nexport async function getChartTakeawayAction(input: GenerateChartTakeawayInput): Promise<{ success: boolean; data?: GenerateChartTakeawayOutput; error?: string }> {\n    try {\n        const result = await generateChartTakeaway(input);\n        return { success: true, data: result };\n    } catch (error) {\n        console.error(\"Error generating chart takeaway:\", error);\n        return { success: false, error: (error instanceof Error ? error.message : String(error)) || \"Failed to generate chart takeaway.\" };\n    }\n}\n\nexport async function getMarketDeepDiveAction(input: MarketDeepDiveInput): Promise<{ success: boolean; data?: MarketDeepDiveOutput; error?: string }> {\n  try {\n    const result = await marketDeepDive(input);\n    return { success: true, data: result };\n  } catch (error) {\n    console.error(\"Error generating market deep-dive:\", error);\n    return { success: false, error: (error instanceof Error ? error.message : String(error)) || \"Failed to generate market deep-dive.\" };\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 898, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 964, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 978, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA","debugId":null}},
    {"offset": {"line": 992, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}